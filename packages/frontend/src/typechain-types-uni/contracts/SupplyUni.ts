/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SupplyUni {
  export type OwnerDepositStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    amount0: PromiseOrValue<BigNumberish>;
    amount1: PromiseOrValue<BigNumberish>;
    initialized: PromiseOrValue<boolean>;
  };

  export type OwnerDepositStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
    initialized: boolean;
  };

  export type PoolStruct = {
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    poolFee: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type PoolStructOutput = [string, string, number, boolean] & {
    token0: string;
    token1: string;
    poolFee: number;
    isActive: boolean;
  };
}

export interface SupplyUniInterface extends utils.Interface {
  functions: {
    "DEADLINE()": FunctionFragment;
    "addPool(address,address,uint24)": FunctionFragment;
    "collectAllFees(uint256)": FunctionFragment;
    "decreasePosition(uint256,uint128,uint256)": FunctionFragment;
    "deposits(address,uint256)": FunctionFragment;
    "getOwnerInfo(address,uint256)": FunctionFragment;
    "getPool(uint256)": FunctionFragment;
    "increasePosition(uint256,uint256,uint256,uint256)": FunctionFragment;
    "mintNewPosition(uint256,uint256,uint256,uint256)": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolCount()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrieveNFT(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEADLINE"
      | "addPool"
      | "collectAllFees"
      | "decreasePosition"
      | "deposits"
      | "getOwnerInfo"
      | "getPool"
      | "increasePosition"
      | "mintNewPosition"
      | "nonfungiblePositionManager"
      | "onERC721Received"
      | "owner"
      | "poolCount"
      | "pools"
      | "renounceOwnership"
      | "retrieveNFT"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEADLINE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAllFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "DEADLINE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Delete(address,uint256)": EventFragment;
    "Deposit(address,uint256,address,address,uint256,uint256,uint24)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,address,address,uint256,uint256,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DeleteEventObject {
  sender: string;
  poolId: BigNumber;
}
export type DeleteEvent = TypedEvent<[string, BigNumber], DeleteEventObject>;

export type DeleteEventFilter = TypedEventFilter<DeleteEvent>;

export interface DepositEventObject {
  sender: string;
  poolId: BigNumber;
  token0: string;
  token1: string;
  amount0: BigNumber;
  amount1: BigNumber;
  poolFee: number;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, number],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawEventObject {
  sender: string;
  poolId: BigNumber;
  token0: string;
  token1: string;
  amount0: BigNumber;
  amount1: BigNumber;
  poolFee: number;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, number],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface SupplyUni extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SupplyUniInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectAllFees(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      percentageAmm: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        initialized: boolean;
      }
    >;

    getOwnerInfo(
      owner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [SupplyUni.OwnerDepositStructOutput] & {
        deposit: SupplyUni.OwnerDepositStructOutput;
      }
    >;

    getPool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [SupplyUni.PoolStructOutput] & { pool: SupplyUni.PoolStructOutput }
    >;

    increasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNewPosition(
      poolId: PromiseOrValue<BigNumberish>,
      amm0: PromiseOrValue<BigNumberish>,
      amm1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, boolean] & {
        token0: string;
        token1: string;
        poolFee: number;
        isActive: boolean;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveNFT(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

  addPool(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    poolFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectAllFees(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePosition(
    poolId: PromiseOrValue<BigNumberish>,
    percentageAmm: PromiseOrValue<BigNumberish>,
    maxSlip: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      tokenId: BigNumber;
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      initialized: boolean;
    }
  >;

  getOwnerInfo(
    owner: PromiseOrValue<string>,
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SupplyUni.OwnerDepositStructOutput>;

  getPool(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SupplyUni.PoolStructOutput>;

  increasePosition(
    poolId: PromiseOrValue<BigNumberish>,
    amountAdd0: PromiseOrValue<BigNumberish>,
    amountAdd1: PromiseOrValue<BigNumberish>,
    maxSlip: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNewPosition(
    poolId: PromiseOrValue<BigNumberish>,
    amm0: PromiseOrValue<BigNumberish>,
    amm1: PromiseOrValue<BigNumberish>,
    maxSlip: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, boolean] & {
      token0: string;
      token1: string;
      poolFee: number;
      isActive: boolean;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveNFT(
    poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectAllFees(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    decreasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      percentageAmm: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        initialized: boolean;
      }
    >;

    getOwnerInfo(
      owner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SupplyUni.OwnerDepositStructOutput>;

    getPool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SupplyUni.PoolStructOutput>;

    increasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintNewPosition(
      poolId: PromiseOrValue<BigNumberish>,
      amm0: PromiseOrValue<BigNumberish>,
      amm1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, boolean] & {
        token0: string;
        token1: string;
        poolFee: number;
        isActive: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrieveNFT(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Delete(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      poolId?: null
    ): DeleteEventFilter;
    Delete(
      sender?: PromiseOrValue<string> | null,
      poolId?: null
    ): DeleteEventFilter;

    "Deposit(address,uint256,address,address,uint256,uint256,uint24)"(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null,
      poolFee?: null
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null,
      poolFee?: null
    ): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,uint256,address,address,uint256,uint256,uint24)"(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null,
      poolFee?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      poolId?: null,
      token0?: null,
      token1?: null,
      amount0?: null,
      amount1?: null,
      poolFee?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectAllFees(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      percentageAmm: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerInfo(
      owner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNewPosition(
      poolId: PromiseOrValue<BigNumberish>,
      amm0: PromiseOrValue<BigNumberish>,
      amm1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveNFT(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEADLINE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectAllFees(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      percentageAmm: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerInfo(
      owner: PromiseOrValue<string>,
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePosition(
      poolId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNewPosition(
      poolId: PromiseOrValue<BigNumberish>,
      amm0: PromiseOrValue<BigNumberish>,
      amm1: PromiseOrValue<BigNumberish>,
      maxSlip: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveNFT(
      poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
