/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRewardsDistributorInterface extends ethers.utils.Interface {
  functions: {
    "getAllUserRewardsBalance(address[],address)": FunctionFragment;
    "getAssetDecimals(address)": FunctionFragment;
    "getDistributionEnd(address,address)": FunctionFragment;
    "getRewardsByAsset(address)": FunctionFragment;
    "getRewardsData(address,address)": FunctionFragment;
    "getRewardsList()": FunctionFragment;
    "getUserAssetData(address,address,address)": FunctionFragment;
    "getUserRewardsBalance(address[],address,address)": FunctionFragment;
    "getUserUnclaimedRewardsFromStorage(address,address)": FunctionFragment;
    "setDistributionEnd(address,address,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllUserRewardsBalance",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionEnd",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsByAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetData",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardsBalance",
    values: [string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnclaimedRewardsFromStorage",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionEnd",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllUserRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsByAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnclaimedRewardsFromStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionEnd",
    data: BytesLike
  ): Result;

  events: {
    "AssetConfigUpdated(address,address,uint256,uint256)": EventFragment;
    "AssetIndexUpdated(address,address,uint256)": EventFragment;
    "RewardsAccrued(address,address,uint256)": EventFragment;
    "UserIndexUpdated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserIndexUpdated"): EventFragment;
}

export type AssetConfigUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    asset: string;
    reward: string;
    emission: BigNumber;
    distributionEnd: BigNumber;
  }
>;

export type AssetIndexUpdatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    asset: string;
    reward: string;
    index: BigNumber;
  }
>;

export type RewardsAccruedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    reward: string;
    amount: BigNumber;
  }
>;

export type UserIndexUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    user: string;
    asset: string;
    reward: string;
    index: BigNumber;
  }
>;

export class IRewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRewardsDistributorInterface;

  functions: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getAssetDecimals(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<[string[]]>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAllUserRewardsBalance(
    assets: string[],
    user: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<number>;

  getDistributionEnd(
    asset: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsByAsset(
    asset: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRewardsData(
    asset: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getRewardsList(overrides?: CallOverrides): Promise<string[]>;

  getUserAssetData(
    user: string,
    asset: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserRewardsBalance(
    assets: string[],
    user: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserUnclaimedRewardsFromStorage(
    user: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDistributionEnd(
    asset: string,
    reward: string,
    distributionEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<number>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<string[]>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetConfigUpdated(address,address,uint256,uint256)"(
      asset?: string | null,
      reward?: string | null,
      emission?: null,
      distributionEnd?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        asset: string;
        reward: string;
        emission: BigNumber;
        distributionEnd: BigNumber;
      }
    >;

    AssetConfigUpdated(
      asset?: string | null,
      reward?: string | null,
      emission?: null,
      distributionEnd?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        asset: string;
        reward: string;
        emission: BigNumber;
        distributionEnd: BigNumber;
      }
    >;

    "AssetIndexUpdated(address,address,uint256)"(
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { asset: string; reward: string; index: BigNumber }
    >;

    AssetIndexUpdated(
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { asset: string; reward: string; index: BigNumber }
    >;

    "RewardsAccrued(address,address,uint256)"(
      user?: string | null,
      reward?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; reward: string; amount: BigNumber }
    >;

    RewardsAccrued(
      user?: string | null,
      reward?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; reward: string; amount: BigNumber }
    >;

    "UserIndexUpdated(address,address,address,uint256)"(
      user?: string | null,
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { user: string; asset: string; reward: string; index: BigNumber }
    >;

    UserIndexUpdated(
      user?: string | null,
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { user: string; asset: string; reward: string; index: BigNumber }
    >;
  };

  estimateGas: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetDecimals(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsList(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetDecimals(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
