/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Strategy, StrategyInterface } from "../Strategy";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quotas",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quotas",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getQuotaPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getQuotaQty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610286806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e1a7d4d146100515780636bacc53f1461006d5780636e2045261461008b578063b6b55f25146100bb575b600080fd5b61006b600480360381019061006691906101d0565b6100d7565b005b61007561012a565b604051610082919061020c565b60405180910390f35b6100a560048036038101906100a091906101d0565b610133565b6040516100b2919061020c565b60405180910390f35b6100d560048036038101906100d091906101d0565b610142565b005b3373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568828360405161011f929190610227565b60405180910390a250565b60006001905090565b60008082905080915050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15828360405161018a929190610227565b60405180910390a250565b600080fd5b6000819050919050565b6101ad8161019a565b81146101b857600080fd5b50565b6000813590506101ca816101a4565b92915050565b6000602082840312156101e6576101e5610195565b5b60006101f4848285016101bb565b91505092915050565b6102068161019a565b82525050565b600060208201905061022160008301846101fd565b92915050565b600060408201905061023c60008301856101fd565b61024960208301846101fd565b939250505056fea2646970667358221220cc7b3f1dbbb3208eb587ebafb7fdeded6e27c0d408c3d4d96b24bf3d7e6f536264736f6c634300080a0033";

export class Strategy__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Strategy> {
    return super.deploy(overrides || {}) as Promise<Strategy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Strategy {
    return super.attach(address) as Strategy;
  }
  connect(signer: Signer): Strategy__factory {
    return super.connect(signer) as Strategy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StrategyInterface {
    return new utils.Interface(_abi) as StrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Strategy {
    return new Contract(address, _abi, signerOrProvider) as Strategy;
  }
}
